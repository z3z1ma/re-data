{"version":3,"sources":["App.tsx","reportWebVitals.ts","contexts/redataOverviewContext.ts","utils/helpers.ts","pages/Alerts.tsx","components/Header.tsx","components/Sidebar.tsx","pages/Dashboard.tsx","components/LineageGraph.tsx","components/ModelDetails.tsx","pages/GraphView.tsx","index.tsx"],"names":["App","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RedataOverviewContext","React","createContext","anomalies","metrics","aggregated_metrics","Map","graph","generated_at","stripQuotes","str","replaceAll","generateAlertMessage","anomaly","compareText","last_value","last_avg","percentage","Math","abs","toFixed","model","column_name","metric","Alerts","useContext","className","scope","map","table_name","format","computed_on","to","tableName","columnName","makeTableKey","Header","type","id","htmlFor","data-dev-hint","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","href","Sidebar","title","alt","src","size","target","rel","overview","require","prepareOverviewData","raw","data","JSON","parse","finalOverview","metricName","has","set","tableMetrics","columnMetrics","metricMap","get","key","push","values","sortedMetrics","sort","a","b","moment","time_window_end","diff","extractMetrics","console","log","Dashboard","Provider","value","LineageGraph","props","useState","network","setNetwork","useSearchParams","selectNodes","options","networkOptions","events","getNetwork","n","memo","generateMetricCharts","tableMetricCharts","Array","from","BarChart","width","height","CartesianGrid","strokeDasharray","Bar","dataKey","XAxis","YAxis","Tooltip","cursor","columnMetricCharts","ModelDetails","modelExists","fullTableName","GraphView","nodes","edges","dbtNodes","Object","entries","details","split","resource","packageName","modelName","modelId","database","schema","name","node","label","shape","parentNodes","Set","depends_on","parentNode","edge","arrows","generateGraph","setURLSearchParams","selectNode","params","length","modelIdentifier","deselectNode","_","ReactDOM","render","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.46141857.chunk.js","sourcesContent":["import React, {ReactElement} from 'react';\nimport './App.css';\nimport {Outlet} from 'react-router-dom';\n\nconst App: React.FC = (): ReactElement => {\n    return (\n        <React.Fragment>\n            <Outlet/>\n        </React.Fragment>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n\nexport interface DbtNode {\n    \"raw_sql\": string;\n    \"resource_type\": string;\n    \"depends_on\": {\n        \"macros\": string[];\n        \"nodes\": string[];\n    };\n    \"config\": {\n        \"enabled\": boolean;\n        \"alias\": string | null;\n        \"schema\": string | null;\n        \"database\": string | null;\n        \"tags\": string[];\n        \"meta\": {};\n        \"materialized\": string;\n        \"persist_docs\": {};\n        \"quoting\": {};\n        \"column_types\": {};\n        \"full_refresh\": string | null;\n        \"on_schema_change\": string;\n        \"post-hook\": [];\n        \"pre-hook\": []\n    };\n    \"database\": string;\n    \"schema\": string;\n    \"fqn\": string[];\n    \"unique_id\": string;\n    \"package_name\": string;\n    \"root_path\": string;\n    \"path\": string;\n    \"original_file_path\": string;\n    \"name\": string;\n    \"alias\": string;\n    \"checksum\": {\n        \"name\": string;\n        \"checksum\": string;\n    };\n    \"tags\": [];\n    \"refs\": Array<Array<string>>;\n    \"sources\": [];\n    \"description\": string;\n    \"columns\": {};\n    \"meta\": {};\n    \"docs\": {\n        \"show\": boolean\n    };\n    \"patch_path\": string;\n    \"compiled_path\": string | null;\n    \"build_path\": string | null;\n    \"deferred\": boolean;\n    \"unrendered_config\": {};\n    \"created_at\": number\n}\n\nexport interface Anomaly {\n    column_name: string;\n    computed_on: string;\n    id: string;\n    interval_length_sec: number;\n    last_avg: number;\n    last_stddev: number;\n    last_value: number;\n    metric: string;\n    table_name: string;\n    time_window_end: string;\n    z_score_value: number;\n}\n\nexport interface Metric {\n    column_name: string;\n    computed_on: string;\n    id: string;\n    interval_length_sec: number;\n    metric: string;\n    table_name: string;\n    time_window_end: string;\n    time_window_start: string;\n    value: number;\n}\n\ninterface DbtGraph {\n    exposures: object;\n    nodes: { [key: string]: DbtNode };\n    sources: object;\n}\n\nexport interface AggregatedMetrics {\n    tableMetrics: Map<string, Array<Metric>>;\n    columnMetrics: Map<string, Array<Metric>>;\n}\n\nexport interface OverviewData {\n    anomalies: Array<Anomaly>;\n    metrics: Array<Metric>;\n    aggregated_metrics: Map<string, AggregatedMetrics>;\n    graph: DbtGraph | null;\n    generated_at: string;\n}\n\nexport const RedataOverviewContext = React.createContext<OverviewData>({\n    anomalies: [],\n    metrics: [],\n    aggregated_metrics: new Map<string, AggregatedMetrics>(),\n    graph: null,\n    generated_at: '',\n});\n","export const stripQuotes = (str: string) => {\n    return str.replaceAll('\"', '');\n};\n","import React, {ReactElement, useContext} from \"react\";\nimport {Anomaly, OverviewData, RedataOverviewContext} from \"../contexts/redataOverviewContext\";\nimport {Link} from \"react-router-dom\";\nimport Moment from \"react-moment\";\nimport {stripQuotes} from \"../utils/helpers\";\n\nconst makeTableKey = (anomaly: Anomaly) => {\n    const tableName = anomaly.table_name;\n    const metric = anomaly.metric;\n    const columnName = anomaly.column_name ? anomaly.column_name : '';\n    return `${tableName}_${metric}_${columnName}`;\n\n};\n\nconst generateAlertMessage = (anomaly: Anomaly) => {\n    const compareText = anomaly.last_value > anomaly.last_avg ? 'greater than' : 'less than';\n    const percentage = ((Math.abs(anomaly.last_value - anomaly.last_avg) / anomaly.last_avg) * 100).toFixed(2);\n    const model = anomaly.column_name ? `column ${anomaly.column_name}` : 'this table';\n    return `${anomaly.metric} for ${model} is ${percentage}% ${compareText} average`;\n};\n\nconst Alerts: React.FC = (): ReactElement => {\n    const dateTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n    const overview: OverviewData = useContext(RedataOverviewContext);\n    const anomalies = overview.anomalies;\n    return (\n        <div className='grid grid-cols-1'>\n            <div className=\"flex flex-col\">\n                <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n                    <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n                        <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\n                            <table className=\"min-w-full divide-y divide-gray-200\">\n                                <thead className=\"bg-gray-50\">\n                                <tr>\n                                    <th scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Model\n                                    </th>\n                                    <th scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Message\n                                    </th>\n                                    <th scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Metric Value\n                                    </th>\n                                    <th scope=\"col\"\n                                        className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                                        Computed On\n                                    </th>\n                                    <th scope=\"col\" className=\"relative px-6 py-3\">\n                                        <span className=\"sr-only\">Details</span>\n                                    </th>\n                                </tr>\n                                </thead>\n                                <tbody className=\"bg-white divide-y divide-gray-200\">\n                                {anomalies.map(anomaly => (\n                                    <tr key={makeTableKey(anomaly)}>\n                                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                                    <span\n                                        className=\"badge mb-3 bg-red-600 rounded-full px-2 py-1 text-center object-right-top text-white text-sm mr-1\">!</span>\n                                            <span\n                                                className='text-xs text-gray-900'>{stripQuotes(anomaly.table_name)}</span>\n                                        </td>\n                                        <td className=\"px-6 text-sm py-4 whitespace-nowrap\">\n                                            <div\n                                                className=\"text-gray-900\">\n                                                {generateAlertMessage(anomaly)}\n                                            </div>\n                                        </td>\n                                        <td className=\"px-6 py-4 text-sm whitespace-nowrap\">\n                                            {anomaly.last_value.toFixed(2)}\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                                            <Moment format={dateTimeFormat}>{anomaly.computed_on}</Moment>\n                                        </td>\n                                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                                            <Link to={'/graph?model=' + stripQuotes(anomaly.table_name)}\n                                                  className=\"text-indigo-600 hover:text-indigo-900\">Details</Link>\n                                        </td>\n                                    </tr>\n                                ))}\n\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Alerts;\n","import React, {ReactElement} from \"react\";\n\nconst Header: React.FC = (): ReactElement => {\n    return (\n        <React.Fragment>\n            <input type=\"checkbox\" id=\"menu-open\" className=\"hidden\"/>\n\n            <label htmlFor=\"menu-open\"\n                   className=\"absolute right-2 bottom-2 shadow-lg rounded-full p-2 bg-gray-100 text-gray-600 md:hidden\"\n                   data-dev-hint=\"floating action button\">\n                <svg className=\"h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"\n                     stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 6h16M4 12h16M4 18h16\"/>\n                </svg>\n            </label>\n            <header className=\"bg-gray-600 text-gray-100 flex justify-between md:hidden\"\n                    data-dev-hint=\"mobile menu bar\">\n                <a href=\"/\" className=\"block p-4 text-white font-bold whitespace-nowrap truncate\">\n                    re_data\n                </a>\n\n\n                <label htmlFor=\"menu-open\" id=\"mobile-menu-button\"\n                       className=\"m-2 p-2 focus:outline-none hover:text-white hover:bg-gray-700 rounded-md\">\n                    <svg id=\"menu-open-icon\" className=\"h-6 w-6 transition duration-200 ease-in-out\"\n                         xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\"\n                              d=\"M4 6h16M4 12h16M4 18h16\"/>\n                    </svg>\n                    <svg id=\"menu-close-icon\" className=\"h-6 w-6 transition duration-200 ease-in-out\"\n                         xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"/>\n                    </svg>\n                </label>\n            </header>\n        </React.Fragment>\n    )\n};\n\nexport default Header;\n","import React, {ReactElement} from \"react\";\nimport {Link} from 'react-router-dom';\nimport {BiNetworkChart, ImNotification, BsSlack, SiReadthedocs} from \"react-icons/all\";\n\nconst Sidebar: React.FC = (): ReactElement => {\n\n    return (\n        <aside id=\"sidebar\"\n               className=\"bg-gray-800 text-gray-100 md:w-32 w-3/4 min-w-min space-y-6 pt-6 px-0 absolute inset-y-0 left-0\n                transform md:relative md:translate-x-0 transition duration-200 ease-in-out  md:flex\n                 md:flex-col md:justify-between max-h-screen overflow-y-auto\" data-dev-hint=\"sidebar; px-0 for frameless; px-2 for visually inset the navigation\">\n            <div className=\"flex flex-col space-y-6\"\n                 data-dev-hint=\"optional div for having an extra footer navigation\">\n                <a href=\"/\" className=\"text-white flex items-center space-x-2 px-8\" title=\"Your App is cool\">\n                    <span className=\"text-2xl font-extrabold whitespace-nowrap truncate\">\n                        <img alt=\"re_data\" className=\"w-14\" src=\"redata.svg\" />\n                    </span>\n                </a>\n\n                <nav data-dev-hint=\"main navigation\">\n                    <Link to='alerts'\n                          className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                        <ImNotification size=\"1.25em\" />\n                        <span>Alerts</span>\n                    </Link>\n\n                    <Link to='graph'\n                       className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                        <BiNetworkChart size=\"1.25em\" />\n                        <span>Graph</span>\n                    </Link>\n                </nav>\n            </div>\n\n            <nav data-dev-hint=\"second-main-navigation or footer navigation\">\n                <a href=\"https://www.getre.io/slack\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                    <BsSlack size=\"1.25em\" />\n                    <div>Slack</div>\n                </a>\n                <a href=\"https://re-data.github.io/re-data/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                    <SiReadthedocs size=\"1.25em\" />\n                    <span>Docs</span>\n                </a>\n\n                <div className=\"flex items-center space-x-2 py-2 px-4 transition duration-200 hover:bg-gray-700 hover:text-white\">\n                    <span className=\"italic\" >version 0.4.0</span>\n                </div>\n            </nav>\n        </aside>\n    );\n};\n\nexport default Sidebar;\n","import React, {ReactElement} from \"react\";\nimport Header from \"../components/Header\";\nimport Sidebar from \"../components/Sidebar\";\nimport {Outlet} from 'react-router-dom';\nimport {AggregatedMetrics, Metric, OverviewData, RedataOverviewContext} from \"../contexts/redataOverviewContext\";\nimport moment from 'moment';\nimport {stripQuotes} from \"../utils/helpers\";\n\ninterface RawOverviewData {\n    anomalies: string | null;\n    metrics: string | null;\n    graph: string;\n    generated_at: string;\n}\n\nconst extractMetrics = (overview: OverviewData) => {\n    const metrics = overview.metrics;\n    const finalOverview: Map<string, AggregatedMetrics> = new Map();\n    for (const metric of metrics) {\n        const tableName = stripQuotes(metric.table_name);\n        const columnName = stripQuotes(metric.column_name);\n        const metricName = stripQuotes(metric.metric);\n        if (!finalOverview.has(tableName)) {\n            finalOverview.set(tableName, {\n                tableMetrics: new Map<string, Array<Metric>>(),\n                columnMetrics: new Map<string, Array<Metric>>(),\n            });\n        }\n        const metricMap = (finalOverview.get(tableName)!);\n        if (!columnName) { // table metric\n            const key = `${tableName}_${metricName}`;\n            if (metricMap.tableMetrics.has(key)) {\n                (metricMap.tableMetrics.get(key)!).push(metric);\n            } else {\n                metricMap.tableMetrics.set(key, [metric]);\n            }\n        } else {\n            const key = `${tableName}_${columnName}_${metricName}`;\n            if (metricMap.columnMetrics.has(key)) {\n                (metricMap.columnMetrics.get(key)!).push(metric);\n            } else {\n                metricMap.columnMetrics.set(key, [metric]);\n            }\n        }\n    }\n    // loop through each table/model and sort by ascending order by time_window_end for table and column metrics\n    for (const metricMap of finalOverview.values()) {\n        for (const [key, metrics] of metricMap.tableMetrics) {\n            const sortedMetrics = metrics.sort((a: Metric, b: Metric) => moment(a.time_window_end).diff(b.time_window_end));\n            metricMap.tableMetrics.set(key, sortedMetrics);\n        }\n        for (const [key, metrics] of metricMap.columnMetrics) {\n            const sortedMetrics = metrics.sort((a: Metric, b: Metric) => moment(a.time_window_end).diff(b.time_window_end));\n            metricMap.tableMetrics.set(key, sortedMetrics);\n        }\n    }\n    return finalOverview;\n};\n\n// const overview: Array<RawOverviewData> = require('../overview.json');\nconst overview: Array<RawOverviewData> = require('../re_data_overview.json');\n\nconst prepareOverviewData = (raw: Array<RawOverviewData>) => {\n    const data = raw[0];\n    const overview: OverviewData = {\n        anomalies: data.anomalies ? JSON.parse(data.anomalies as string) : [],\n        metrics: data.metrics ? JSON.parse(data.metrics as string) : [],\n        aggregated_metrics: new Map<string, AggregatedMetrics>(),\n        graph: JSON.parse(data.graph as string),\n        generated_at: data.generated_at,\n    }\n    overview.aggregated_metrics = extractMetrics(overview);\n    console.log(overview)\n    return overview;\n};\n\nconst Dashboard: React.FC = (): ReactElement => {\n    return (\n        <RedataOverviewContext.Provider value={prepareOverviewData(overview)}>\n            <div className=\"relative min-h-screen md:flex\" data-dev-hint=\"container\">\n                <Header/>\n                <Sidebar/>\n\n                <main id=\"content\" className=\"flex-1 p-6 lg:px-8 bg-gray-100 max-h-screen overflow-y-auto\">\n                    <div className=\"max-w-7xl mx-auto h-full\">\n                        <div className=\"px-4 py-6 sm:px-0 h-full\">\n                            <Outlet/>\n                        </div>\n                    </div>\n                </main>\n            </div>\n        </RedataOverviewContext.Provider>\n    );\n};\n\nexport default Dashboard;\n","import React, {memo, PropsWithChildren, ReactElement, useState} from \"react\";\nimport VisNetworkReactComponent from \"vis-network-react\";\nimport {useSearchParams} from \"react-router-dom\";\n\ninterface LineageGraphProps {\n    data: any;\n    events: any;\n    networkOptions: any;\n}\n\nconst LineageGraph: React.FC<LineageGraphProps> = (props: PropsWithChildren<LineageGraphProps>): ReactElement => {\n    const [network, setNetwork] = useState<any>(null);\n    const [searchParams] = useSearchParams();\n    const model = searchParams.get('model');\n    if (model && network) {\n        network.selectNodes([model], true);\n    }\n    const getNetwork = (n: any) => {\n        setNetwork(n);\n        console.log(n);\n    };\n    return (\n        <div className=\"col-span-3\">\n            <VisNetworkReactComponent\n                data={props.data}\n                options={props.networkOptions}\n                events={props.events}\n                getNetwork={getNetwork}\n            />\n        </div>\n    );\n};\n\nexport default memo(LineageGraph, () => {\n    // Return true indicating that the props are always equal to avoid re-rendering of lineage graph since it's static\n    return true\n});\n","import React, {ReactElement, useContext} from \"react\";\nimport {useSearchParams} from \"react-router-dom\"\nimport {AggregatedMetrics, OverviewData, RedataOverviewContext} from \"../contexts/redataOverviewContext\";\nimport {CartesianGrid, XAxis, YAxis, Tooltip, Bar, BarChart} from 'recharts'\n\nconst generateMetricCharts = (data: AggregatedMetrics): ReactElement => {\n    const tableMetricCharts = (\n        Array.from(data.tableMetrics).map(([key, metrics]) => (\n            <div key={key}>\n                <span className=\"text-sm text-gray-500\">{key}</span>\n                <BarChart width={400} height={200} data={metrics}>\n                    <CartesianGrid strokeDasharray=\"3 3\"/>\n                    <Bar dataKey=\"value\" fill=\"#8884d8\"/>\n                    <XAxis dataKey=\"time_window_end\"/>\n                    <YAxis/>\n                    <Tooltip cursor={false}/>\n                </BarChart>\n            </div>\n        )));\n    const columnMetricCharts = (\n        Array.from(data.columnMetrics).map(([key, metrics]) => (\n            <div key={key}>\n                <span className=\"text-sm\">{key}</span>\n                <BarChart width={400} height={200} data={metrics}>\n                    <CartesianGrid strokeDasharray=\"3 3\"/>\n                    <Bar dataKey=\"value\" fill=\"#8884d8\"/>\n                    <XAxis dataKey=\"time_window_end\"/>\n                    <YAxis/>\n                    <Tooltip cursor={false}/>\n                </BarChart>\n            </div>\n        )));\n    return (\n        <div>\n            <span className=\"text-lg text--capitalize font-bold\">Table Metrics</span>\n            {tableMetricCharts}\n            <span className=\"text-lg text--capitalize font-bold\">Column Metrics</span>\n            {columnMetricCharts}\n        </div>\n    );\n}\n\nconst ModelDetails: React.FC = (): ReactElement => {\n    const [searchParams] = useSearchParams();\n    let modelExists = false;\n    const fullTableName = searchParams.get('model');\n    const overview: OverviewData = useContext(RedataOverviewContext);\n    // @ts-ignore\n    let data: AggregatedMetrics = [];\n    if (typeof fullTableName === \"string\" && overview.aggregated_metrics.has(fullTableName)) {\n        modelExists = true;\n        // @ts-ignore\n        data = overview.aggregated_metrics.get(fullTableName);\n    }\n    return (\n        <div className='col-span-2 h-auto overflow-scroll'>\n            <div className=\"bg-white rounded shadow border p-3\">\n                {!modelExists ? (<span>No metrics</span>) : generateMetricCharts(data)}\n            </div>\n        </div>\n\n    );\n};\n\nexport default ModelDetails;\n","import React, {ReactElement, useContext} from \"react\";\nimport './GraphView.css';\nimport LineageGraph from \"../components/LineageGraph\";\nimport ModelDetails from \"../components/ModelDetails\";\nimport {useSearchParams} from \"react-router-dom\";\nimport {OverviewData, RedataOverviewContext} from \"../contexts/redataOverviewContext\";\n\ninterface VisPointer {\n    x: number,\n    y: number\n}\n\ninterface VisNode {\n    id: string | number,\n    label: string | number;\n    shape: string;\n}\n\ninterface VisEdge {\n    from: string | number,\n    to: string | number;\n    arrows: string;\n}\n\ninterface VisNetworkEventParams {\n    edges?: Array<string>,\n    nodes?: Array<string>,\n    event?: object,\n    pointer?: {\n        DOM: VisPointer\n        canvas: VisPointer\n    }\n}\n\ninterface IGraph {\n    nodes: Array<VisNode>;\n    edges: Array<VisEdge>;\n}\n\nconst generateGraph = (overview: OverviewData) => {\n    const graph: IGraph = {\n        nodes: [],\n        edges: [],\n    }\n    if (!overview.graph) {\n        return graph;\n    }\n    const dbtNodes = overview.graph.nodes;\n    for (const [model, details] of Object.entries(dbtNodes)) {\n        const [resource, packageName, modelName] = model.split('.');\n        if (resource === 'test' || packageName === 're_data') {\n            continue;\n        }\n        const modelId = `${details.database}.${details.schema}.${details.name}`;\n        const node: VisNode = {\n            id: modelId,\n            label: modelName,\n            shape: 'box',\n        }\n        graph.nodes.push(node)\n\n        const parentNodes = new Set(details.depends_on.nodes);\n        for (const parent of parentNodes) {\n            const parentNode = dbtNodes[parent]\n            if (parentNode) {\n                // in coming edge only if parent node exists\n                const parentModelId = `${parentNode.database}.${parentNode.schema}.${parentNode.name}`;\n                const edge: VisEdge = {\n                    from: parentModelId,\n                    to: modelId,\n                    arrows: 'to'\n                }\n                graph.edges.push(edge);\n            }\n        }\n    }\n    return graph;\n};\n\nconst GraphView: React.FC = (): ReactElement => {\n    const overview: OverviewData = useContext(RedataOverviewContext);\n    const graph = generateGraph(overview)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, setURLSearchParams] = useSearchParams();\n    const data = {\n        nodes: graph.nodes,\n        edges: graph.edges\n    }\n    const events = {\n        selectNode: (params: VisNetworkEventParams) => {\n            if (!params.nodes || params.nodes.length !== 1) {\n                // only select a single node\n                return\n            }\n            const modelIdentifier = params.nodes[0];\n            setURLSearchParams({\n                model: modelIdentifier,\n            });\n        },\n        deselectNode: (_: VisNetworkEventParams) => {\n            setURLSearchParams({});\n        }\n    };\n    const networkOptions = {\n        \"height\": '100%',\n        \"width\": '100%',\n        \"edges\": {\n            \"color\": {\n                \"color\": \"#8884d8\",\n                \"highlight\": \"#8884d8\",\n                \"hover\": \"#8884d8\",\n                \"inherit\": false\n            }, \"dashes\": false, \"smooth\": {\"type\": \"continuous\", \"forceDirection\": \"none\"}\n        },\n        \"nodes\": {\n            \"color\": {\n                \"border\": \"#8884d8\",\n                \"background\": \"#8884d8\",\n                \"highlight\": \"#392396\",\n                \"hover\": {\n                    \"border\": \"#392396\",\n                    \"background\": \"#8884d8\",\n                }\n            },\n            // \"color\": \"#8884d8\",\n            \"font\": {\n                \"color\": \"#ffffff\"\n            }\n        },\n        \"layout\": {\n            \"hierarchical\": {\n                \"enabled\": true,\n                \"levelSeparation\": 485,\n                \"nodeSpacing\": 5,\n                \"treeSpacing\": 30,\n                \"blockShifting\": false,\n                \"edgeMinimization\": true,\n                \"parentCentralization\": false,\n                \"direction\": \"LR\",\n                \"sortMethod\": \"directed\"\n            }\n        },\n        \"interaction\": {\"hover\": true, \"navigationButtons\": false, \"multiselect\": true, \"keyboard\": {\"enabled\": true}},\n        \"physics\": {\n            \"enabled\": false,\n            \"hierarchicalRepulsion\": {\"centralGravity\": 0},\n            \"minVelocity\": 0.75,\n            \"solver\": \"hierarchicalRepulsion\"\n        }\n    };\n\n    return (\n        <div\n            // className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-6 gap-4 CustomGraphHeight shadow overflow-hidden border-b border-gray-200 sm:rounded-lg h-full\">\n            className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-5\n             gap-4 h-80 border-4 border-dashed border-gray-200\n              rounded-lg h-full\">\n            <LineageGraph data={data} events={events} networkOptions={networkOptions}/>\n            <ModelDetails/>\n        </div>\n    )\n};\n\nexport default GraphView;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Routes, Route, HashRouter} from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\nimport Alerts from \"./pages/Alerts\";\nimport Dashboard from \"./pages/Dashboard\";\nimport GraphView from \"./pages/GraphView\";\n\nReactDOM.render(\n    <HashRouter>\n        <Routes>\n            <Route path=\"/\" element={<App/>}>\n                <Route path=\"/\" element={<Dashboard/>}>\n                    <Route path=\"alerts\" element={<Alerts/>}/>\n                    <Route path=\"graph\" element={<GraphView/>}/>\n                </Route>\n            </Route>\n        </Routes>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}